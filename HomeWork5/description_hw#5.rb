# приклад флоу
# 1. Спочатку потрібно запустити скрипти який запропонує ввести урлу на імедж
# ruby upload_image.rb
# => Enter image url
# після цього, потрібно провалідувати введену урлу і зберегти файл в поточній дерикторії.
# в якості назви файлу потрібно запропонувати юзеру ввести назву самостійно або ж в разі його відмови забрати назву яка використовується в середені урли
# 2*. Дати можливість запропонувати юзеру шлях куди він хочеш зберегти зображення в разі успішного його аплоада.
# Відповідно, потрібно буде провалідувати наявність даного шляха в файловій системі


# Вимоги до домашнього завдання.
# Кожен клас повинен знаходитись у своєму власному файлі. Назва файла повинна відповідати назві класу який він містить.
# Тобто файлова система повинна бути наступною
# ./faraday_request_wrapper.rb
# ./url_validator.rb
# ./image_uploader.rb
# ./upload_image.rb - файл в якому буде описана логіка завантаження імеджу
# ./Gemfile
# ./Gemfile.lock
# Все домашнє завдання повинно бути написано на англійській мові. Коменти повинні бути видаленими
# Після того як завдання буде виконане, потрібно з допомогою гема rubocop виправити всі зауваження що до синтаксису

class FaradayRequestWrapper
  # Клас який відповідає за обробку екцепшинів які можуть упасти під час реквестів.
  # У випадку, якщо під час реквесту сталась помилка, потрібно зробити ще як мінімум 2 спроби дістати імедж
  # список ексепшинів які може повернути faraday можна знайти тут https://github.com/lostisland/faraday/blob/main/lib/faraday/error.rb
  # в цілому можете обрати 3-6 екцепшинів на вибір які хочете похендилити. це не принципіально

  def call
    # ...
  end
end

class UrlValidator
  # клас що займається валідацією переданої в скріпт строки. Він повинен перевіряти, що:
  # - передана в скріпт строка являється урлою
  # - урла яка веде на імедж має розширення .jpeg, .png
  # В разі провалу валідації, в консоль потрібно вивеcти відповідний еррор месседж

  def call
    # ...
  end
end

class ImageUploader
  # клас що займається опрацюванням всього флоу загрузки зображення
  # валідація урли, завантаження, збереження

  def call
    # ...
  end

  def validate
    UrlValidator.(image_url)
  end

  def upload
    RequestWrapper.call do
      Faraday.get(image_url)
    end
  end
end